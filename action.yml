name: "R2 to GitHub"
description: "Transfer files from Cloudflare R2 to GitHub repositories based on size or quantity strategy."
author: "jimugou"
inputs:
  config_path:
    description: "Path to the configuration YAML file."
    required: true
    default: "./config.yml"
outputs:
  result:
    description: "Summary of the action's execution."

runs:
  using: composite
  steps:
    - name: Running
      shell: bash
      run: |
        echo "开始 R2 ---> GitHub 脚本"

        # 安装 yq，如果未安装
        if ! command -v yq &> /dev/null; then
          echo "Installing yq..."
          sudo apt-get update && sudo apt-get install -y yq
        fi

        # 读取配置文件内容并替换格式，确保冒号后有空格
        CONFIG=$(sed 's/[<>]//g; s/:/: /g; s/:[[:space:]]\+/: /g' "${{ inputs.config_path }}")

        # 从配置文件中读取 Cloudflare R2 的相关参数
        readarray -t R2_ACCOUNT_NAME < <(yq '.r2_accounts[].name' <<< "$CONFIG")
        readarray -t R2_ACCOUNT_ID < <(yq '.r2_accounts[].account_id' <<< "$CONFIG")
        readarray -t R2_ACCESS_KEY_ID < <(yq '.r2_accounts[].access_key_id' <<< "$CONFIG")
        readarray -t R2_SECRET_ACCESS_KEY < <(yq '.r2_accounts[].secret_access_key' <<< "$CONFIG")
        readarray -t R2_BUCKET < <(yq '.r2_accounts[].bucket' <<< "$CONFIG")
        readarray -t R2_DIR < <(yq '.r2_accounts[].dir' <<< "$CONFIG")
        
        # 为每个账户生成对应的 endpoint URL
        R2_ENDPOINT_URL=()
        for o in "${R2_ACCOUNT_ID[@]}"; do
          R2_ENDPOINT_URL+=("https://${o}.r2.cloudflarestorage.com")
        done

        # 从配置文件中读取 GitHub 的相关参数
        GITHUB_PAT=$(yq '.github_pat' <<< "$CONFIG")
        GITHUB_REPO_PREFIX=$(yq '.github_repo_prefix' <<< "$CONFIG")
        # 获取 GitHub 的仓库列表
        readarray -t GITHUB_REPO_LIST < <(yq '.gitlab_pats | keys | .[]' <<< "$CONFIG" | sed "s/^/${GITHUB_REPO_PREFIX}/g")
        # 获取 GitHub 用户名
        GITHUB_USERNAME=$(curl --silent --header "Authorization: Bearer $GITHUB_PAT" https://api.github.com/user | awk -F '"' '/"login":/{print $4}')

        # 获取迁移策略
        STRATEGY=$(yq '.strategy' <<< "$CONFIG")

        # 判断是否需要删除已迁移文件
        DELETE=$(yq '.delete' <<< "$CONFIG")

        # 检查策略是否直接指定了仓库
        REPO_NAME=""
        for j in "${GITHUB_REPO_LIST[@]}"; do
          if grep -qw "${STRATEGY}" <<< "$j"; then
            REPO_NAME="${STRATEGY}"
            break
          fi
        done

        # 如果策略直接指定了仓库
        if [ -n "$REPO_NAME" ]; then
          STRATEGY_RESULT="策略: 指定存放到 ${REPO_NAME}" # 策略为指定仓库
        elif [ "${STRATEGY,,}" = 'quantity' ]; then
          # 如果策略是基于文件数量的最少策略
          MIN_INDEX=0
          MIN_FILE_QUANTITY=$(curl --silent \
          --header "Authorization: token ${GITHUB_PAT}" \
          --header "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[0]}/contents/${R2_DIR[0]}" | grep -c '"name"') # 获取第一个仓库的文件数量

          # 遍历仓库，找到文件数量最少的仓库
          for ((i=1; i<${#GITHUB_REPO_LIST[@]}; i++)); do
            REPO_FILE_QUANTITY=$(curl --silent \
            --header "Authorization: token ${GITHUB_PAT}" \
            --header "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[i]}/contents/${R2_DIR[i]}" | grep -c '"name"')
            if [[ "$MIN_FILE_QUANTITY" -gt "$REPO_FILE_QUANTITY" ]]; then
              MIN_FILE_QUANTITY="$REPO_FILE_QUANTITY"
              MIN_INDEX="$i"
            fi
          done
          REPO_NAME=${GITHUB_REPO_LIST[MIN_INDEX]}
          STRATEGY_RESULT="策略: 存放到文件数量最少的 ${REPO_NAME}" # 选择文件数量最少的仓库
        else
          # 如果策略是基于仓库大小的最小策略
          if ! grep -qwE 'size|quantity' <<< "${STRATEGY,,}"; then
            echo "Strategy 现在 [${STRATEGY}] 不可用， 将采用默认策略 size，可选项是 [size|quantity|$(IFS='|' ; echo "${GITHUB_REPO_LIST[*]}")]"
            STRATEGY_RESULT="策略: 采用默认策略 size"
            STRATEGY="size"
          fi
          MIN_INDEX=0
          MIN_REPO_SIZE=$(curl --silent \
          --header "Authorization: token ${GITHUB_PAT}" \
          --header "Accept: application/vnd.github.v3+json" \
          "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[0]}/contents/${R2_DIR[0]}" | awk -F '[:,]' '/"size":/{print $2}' | awk '{s+=$1} END {print s}') # 获取第一个仓库的大小

          # 遍历仓库，找到容量最小的仓库
          for ((i=1; i<${#GITHUB_REPO_LIST[@]}; i++)); do
            REPO_SIZE=$(curl --silent \
            --header "Authorization: token ${GITHUB_PAT}" \
            --header "Accept: application/vnd.github.v3+json" \
            "https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[i]}/contents/${R2_DIR[i]}" | awk -F '[:,]' '/"size":/{print $2}' | awk '{s+=$1} END {print s}')
            if [[ "$MIN_REPO_SIZE" -gt "$REPO_SIZE" ]]; then
              MIN_REPO_SIZE="$REPO_SIZE"
              MIN_INDEX="$i"
            fi
          done
          REPO_NAME=${GITHUB_REPO_LIST[MIN_INDEX]}
          STRATEGY_RESULT="策略: 存放到仓库容量最少的 ${REPO_NAME}" # 选择容量最小的仓库
        fi

        # 配置 Git
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

        # 配置 AWS CLI 访问 Cloudflare R2 的凭据
        aws configure set region auto
        aws configure set output json

        REPORT="" # 初始化报告

        # 处理每个 R2 账号
        for n in "${!R2_ACCOUNT_NAME[@]}"; do
          echo "================================"
          echo "Processing account: ${R2_ACCOUNT_NAME[n]}"
          aws configure set aws_access_key_id "${R2_ACCESS_KEY_ID[n]}"
          aws configure set aws_secret_access_key "${R2_SECRET_ACCESS_KEY[n]}"

          # 获取 Cloudflare R2 中的所有文件列表
          unset FILE_LIST SUCCESS_UPDATE NEED_MOVE_FILE SKIP_FILE DELETE_FILE m
          readarray -t FILE_LIST < <(aws s3 ls --endpoint-url="${R2_ENDPOINT_URL[n]}" "s3://${R2_BUCKET[n]}/" --recursive | awk '{ $1=$2=$3=$4=""; print substr($0,5) }')

          # 如果有文件需要处理
          if [ "${#FILE_LIST[@]}" -gt 0 ]; then
            # 克隆目标仓库
            if [ ! -d "${REPO_NAME}" ]; then
              git clone --depth=1 "https://${GITHUB_USERNAME}:${GITHUB_PAT}@github.com/${GITHUB_USERNAME}/${REPO_NAME}.git"
            fi
            cd "${REPO_NAME}" || { echo "Failed to enter repository directory ${REPO_NAME}"; exit 1; }

            # 遍历文件列表，检查每个文件的大小
            for k in "${FILE_LIST[@]}"; do
              if aws s3api head-object \
                  --endpoint-url="${R2_ENDPOINT_URL[n]}" \
                  --bucket "${R2_BUCKET[n]}" \
                  --key "${k}" >/dev/null 2>&1; then

                FILE_SIZE=$(aws s3api head-object \
                    --endpoint-url="${R2_ENDPOINT_URL[n]}" \
                    --bucket "${R2_BUCKET[n]}" \
                    --key "${k}" \
                    --query "ContentLength" \
                    --output text 2>/dev/null || echo "0")

                if [ "${FILE_SIZE}" -le 104857600 ] && [ "${FILE_SIZE}" -ne "0" ]; then
                  NEED_MOVE_FILE+=("${k}")
                elif [ "${FILE_SIZE}" -gt 104857600 ]; then
                  SKIP_FILE+=("${k}")
                fi
              else
                echo "警告: 文件 \"${k}\" 不存在或无法访问，跳过此文件"
                continue
              fi
            done

            # 将符合条件的文件下载到本地
            if [ "${#NEED_MOVE_FILE[@]}" -gt 0 ]; then
              echo "================================="
              m=0
              for l in "${NEED_MOVE_FILE[@]}"; do
                (( m++ ))
                echo "${R2_ACCOUNT_NAME[n]} copying ${m} / ${#NEED_MOVE_FILE[@]} : ${l}"
                if aws s3 cp --endpoint-url="${R2_ENDPOINT_URL[n]}" "s3://${R2_BUCKET[n]}/${l}" "${l}" >/dev/null 2>&1; then
                  DELETE_FILE+=("${l}")
                else
                  echo "警告: 复制文件 \"${l}\" 失败，跳过此文件"
                  continue
                fi
              done
            fi

            # 提交更改到 GitHub
            git add .
            git commit -m "Add files from Cloudflare R2 ${R2_ACCOUNT_NAME[n]}" || echo "No changes to commit"
            git push && SUCCESS_UPDATE=true || echo "No changes to push"
            cd ..

            if [ "${SUCCESS_UPDATE}" = 'true' ]; then
              # 删除已经迁移的文件
              if [ "${DELETE,,}" = 'true' ]; then
                COPY_OR_MOVE='迁移'
                echo "Delete files from CloudFlare R2 ${R2_ACCOUNT_NAME[n]}"
                for file in "${DELETE_FILE[@]}"; do
                  if aws s3 rm --endpoint-url="${R2_ENDPOINT_URL[n]}" "s3://${R2_BUCKET[n]}/${file}" >/dev/null 2>&1; then
                    echo "已删除文件: ${file}"
                  else
                    echo "警告: 无法删除文件 \"${file}\""
                  fi
                done
              else
                COPY_OR_MOVE='复制'
              fi

              # 更新报告
              REPORT+="\n已成功${COPY_OR_MOVE} CloudFlare R2 ${R2_ACCOUNT_NAME[n]} ${#NEED_MOVE_FILE[@]} 个文件 ---> ${REPO_NAME}"
              if [ "${#SKIP_FILE[@]}" -gt 0 ]; then
                if [ "${#SKIP_FILE[@]}" -eq 1 ]; then
                  REPORT+="\n1 个文件大于 100MB，不能${COPY_OR_MOVE}到 ${REPO_NAME}，是 \"${SKIP_FILE[@]}\""
                else
                  REPORT+="\n${#SKIP_FILE[@]} 个文件大于 100MB，不能${COPY_OR_MOVE}到 ${REPO_NAME}，分别是 \"${SKIP_FILE[@]}\""
                fi
              fi
            else
              REPORT+="\nGitHub: ${REPO_NAME} 更新失败"
            fi
          else
            # 如果没有文件需要处理
            REPORT+="\nCloudFlare R2 ${R2_ACCOUNT_NAME[n]} 没有更新文件."
          fi
        done

        # 清理本地仓库副本
        if [ -d "${REPO_NAME}" ]; then
          rm -rf "${REPO_NAME}"
        fi

        # 打印总结
        echo "================================="
        echo "总结:"
        echo "${STRATEGY_RESULT}"
        echo -e "${REPORT}"

name: "R2 to GitHub"
description: "Transfer files from Cloudflare R2 to GitHub repositories based on size or quantity strategy."
author: "jimugou"
inputs:
  config_path:
    description: "Path to the configuration YAML file."
    required: true
    default: "./config.yml"
outputs:
  result:
    description: "Summary of the action's execution."

runs:
  using: composite
  steps:
    - name: Running
      shell: bash
      run: |
        echo "开始 R2 ---> GitHub 脚本"

        # 读取配置文件内容并替换格式
        CONFIG=$(sed 's/[<>]//g; s/:/: /g; s/:[[:space:]]\+/: /g' "${{ inputs.config_path }}")

        # 读取 R2 配置
        R2_ACCOUNT_NAME=($(yq '.r2_accounts[].name' <<< "$CONFIG"))
        R2_ACCOUNT_ID=($(yq '.r2_accounts[].account_id' <<< "$CONFIG"))
        R2_ACCESS_KEY_ID=($(yq '.r2_accounts[].access_key_id' <<< "$CONFIG"))
        R2_SECRET_ACCESS_KEY=($(yq '.r2_accounts[].secret_access_key' <<< "$CONFIG"))
        R2_BUCKET=($(yq '.r2_accounts[].bucket' <<< "$CONFIG"))
        R2_DIR=($(yq '.r2_accounts[].dir' <<< "$CONFIG"))
        
        # 生成 endpoint URLs
        for o in "${R2_ACCOUNT_ID[@]}"; do
          R2_ENDPOINT_URL+=(https://${o}.r2.cloudflarestorage.com)
        done

        # 读取 GitHub 配置
        GITHUB_PAT=$(yq '.github_pat' <<< "$CONFIG")
        GITHUB_REPO_PREFIX=$(yq '.github_repo_prefix' <<< "$CONFIG")
        GITHUB_REPO_LIST=($(yq '.gitlab_pats | keys | .[]' <<< "$CONFIG" | sed "s/^/${GITHUB_REPO_PREFIX}&/g"))
        GITHUB_USERNAME=$(curl --silent --header "Authorization: Bearer $GITHUB_PAT" https://api.github.com/user | awk -F '"' '/"login":/{print $4}')

        # 读取策略配置
        STRATEGY=$(yq '.strategy' <<< "$CONFIG")
        DELETE=$(yq '.delete' <<< "$CONFIG")

        # 检查策略是否指定仓库
        for j in ${GITHUB_REPO_LIST[@]}; do
          grep -qw "${STRATEGY}" <<< "$j" && REPO_NAME="${STRATEGY}" && break
        done

        # 确定目标仓库
        if [ -n "$REPO_NAME" ]; then
          STRATEGY_RESULT="策略: 指定存放到 ${REPO_NAME}"
        elif [ "${STRATEGY,,}" = 'quantity' ]; then
          MIN_INDEX=0
          MIN_FILE_QUANTITY=$(curl --silent \
          --header "Authorization: token ${GITHUB_PAT}" \
          --header "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[0]}/contents/${R2_DIR} | grep -c '"name"')

          for ((i=1; i<${#GITHUB_REPO_LIST[@]}; i++)); do
            REPO_FILE_QUANTITY[i]=$(curl --silent \
            --header "Authorization: token ${GITHUB_PAT}" \
            --header "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[i]}/contents/${R2_DIR} | grep -c '"name"')
            if [[ "$MIN_FILE_QUANTITY" -gt "${REPO_FILE_QUANTITY[i]}" ]]; then
              MIN_FILE_QUANTITY="${REPO_FILE_QUANTITY[i]}"
              MIN_INDEX="$i"
            fi
          done
          REPO_NAME=${GITHUB_REPO_LIST[MIN_INDEX]}
          STRATEGY_RESULT="策略: 存放到文件数量最少的 ${REPO_NAME}"
        else
          grep -qwE 'size|quantity' <<< "${STRATEGY,,}" || echo "Strategy 现在 [${STRATEGY}] 不可用， 将采用默认策略 size"
          MIN_INDEX=0
          MIN_REPO_SIZE=$(curl --silent \
          --header "Authorization: token ${GITHUB_PAT}" \
          --header "Accept: application/vnd.github.v3+json" \
          https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[0]}/contents/${R2_DIR} | awk -F '[:,]' '/"size":/{print $2}' | awk '{s+=$1} END {print s}')

          for ((i=1; i<${#GITHUB_REPO_LIST[@]}; i++)); do
            REPO_SIZE[i]=$(curl --silent \
            --header "Authorization: token ${GITHUB_PAT}" \
            --header "Accept: application/vnd.github.v3+json" \
            https://api.github.com/repos/${GITHUB_USERNAME}/${GITHUB_REPO_LIST[i]}/contents/${R2_DIR} | awk -F '[:,]' '/"size":/{print $2}' | awk '{s+=$1} END {print s}')
            if [[ "$MIN_REPO_SIZE" -gt "${REPO_SIZE[i]}" ]]; then
              MIN_REPO_SIZE="${REPO_SIZE[i]}"
              MIN_INDEX="$i"
            fi
          done
          REPO_NAME=${GITHUB_REPO_LIST[MIN_INDEX]}
          STRATEGY_RESULT="策略: 存放到仓库容量最少的 ${REPO_NAME}"
        fi

        # 配置 Git
        git config --global user.name 'github-actions'
        git config --global user.email 'github-actions@github.com'

        # 配置 AWS CLI
        aws configure set region auto
        aws configure set output json

        # 处理每个 R2 账号
        for n in ${!R2_ACCOUNT_NAME[@]}; do
          aws configure set aws_access_key_id ${R2_ACCESS_KEY_ID[n]}
          aws configure set aws_secret_access_key ${R2_SECRET_ACCESS_KEY[n]}

          # 获取文件列表
          unset FILE_LIST SUCCESS_UPDATE NEED_MOVE_FILE SKIP_FILE DELETE_FILE m
          FILE_LIST=($(aws s3 ls --endpoint-url=${R2_ENDPOINT_URL[n]} s3://${R2_BUCKET[n]}/ --recursive | awk '{print $NF}'))

          if [ "${#FILE_LIST[@]}" -gt 0 ]; then
            [ -d "${REPO_NAME}" ] || git clone --depth=1 https://${GITHUB_USERNAME}:${GITHUB_PAT}@github.com/${GITHUB_USERNAME}/${REPO_NAME}.git
            cd ${REPO_NAME}

# ... 前面的代码保持不变，直到文件检查部分 ...

            # 检查文件大小
            for k in "${FILE_LIST[@]}"; do
              # 先检查文件是否存在
              if aws s3api head-object \
                  --endpoint-url="${R2_ENDPOINT_URL[n]}" \
                  --bucket "${R2_BUCKET[n]}" \
                  --key "${k}" >/dev/null 2>&1; then
                  
                # 如果文件存在，获取文件大小
                FILE_SIZE=$(aws s3api head-object \
                    --endpoint-url="${R2_ENDPOINT_URL[n]}" \
                    --bucket "${R2_BUCKET[n]}" \
                    --key "${k}" \
                    --query "ContentLength" \
                    --output text)
                
                if [ "${FILE_SIZE}" -le 104857600 ]; then
                  NEED_MOVE_FILE+=(${k})
                else
                  SKIP_FILE+=(${k})
                fi
              else
                echo "警告: 文件 ${k} 不存在，跳过此文件"
                continue
              fi
            done

            # 如果没有需要移动的文件，直接继续下一个账号
            if [ "${#NEED_MOVE_FILE[@]}" -eq 0 ]; then
              echo "没有找到可移动的文件，继续下一个账号"
              continue
            fi

            echo "================================="
            for l in "${NEED_MOVE_FILE[@]}"; do
              (( m++ )) || true
              echo "${R2_ACCOUNT_NAME[n]} copying ${m} / ${#NEED_MOVE_FILE[@]} : ${l#*/}"
              if aws s3 cp --endpoint-url=${R2_ENDPOINT_URL[n]} s3://${R2_BUCKET[n]}/${l} ${l} >/dev/null 2>&1; then
                DELETE_FILE+=("${l}")
              else
                echo "警告: 复制文件 ${l} 失败，跳过此文件"
                continue
              fi
            done

# ... 后面的代码保持不变 ...

            git add .
            git commit -m "Add images from Cloudflare R2 ${R2_ACCOUNT_NAME[n]}" || echo "No changes to commit"
            git push && SUCCESS_UPDATE=true || echo "No changes to push"
            cd ..

            if [ "${SUCCESS_UPDATE}" = 'true' ]; then
              if [ "${DELETE,,}" = 'true' ]; then
                COPY_OR_MOVE='迁移'
                echo "Delete files from CloudFlare R2 ${R2_ACCOUNT_NAME[n]}"
                for file in "${DELETE_FILE[@]}"; do
                  aws s3 rm --endpoint-url=${R2_ENDPOINT_URL[n]} s3://${R2_BUCKET[n]}/${file} || true
                done
              else
                COPY_OR_MOVE='复制'
              fi

              REPORT+="\n已成功${COPY_OR_MOVE} CloudFlare R2 ${R2_ACCOUNT_NAME[n]} ${#NEED_MOVE_FILE[@]} 个文件 ---> ${REPO_NAME}"
              if [ "${#SKIP_FILE[@]}" -gt 0 ]; then
                [ "${#SKIP_FILE[@]}" = 1 ] && \
                  REPORT+="\n1 个文件大于 100MB，不能${COPY_OR_MOVE}到 ${REPO_NAME}，是 ${SKIP_FILE[@]}" || \
                  REPORT+="\n${#SKIP_FILE[@]} 个文件大于 100MB，不能${COPY_OR_MOVE}到 ${REPO_NAME}，分别是 ${SKIP_FILE[@]}"
              fi
            else
              REPORT+="\nGitHub: ${REPO_NAME} 更新失败"
            fi
          else
            REPORT+="\nCloudFlare R2 ${R2_ACCOUNT_NAME[n]} 没有更新文件."
          fi
        done

        [ -d "${REPO_NAME}" ] && rm -rf "${REPO_NAME}"

        echo "================================="
        echo "总结:"
        echo "${STRATEGY_RESULT}"
        echo -e "${REPORT}"
